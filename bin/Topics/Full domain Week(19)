Full domain Week(19)

Pending's:
Map operations,
Constructors,
Ternary operator,
Arrow function,
With - extends,
async*,
Types of states,
Properties of scaffold,
Create horizontal listview,
Scroll physics, Unique constraints,
Add column into existing table,
Garbage collector,
palindrome, -----
variables,
instance variables vs local variables 
what is main                         `
practice more list operations,
practice more string operations

 
                                                                                           Full domain Week(19)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Flutter Advantages

1.Single Codebase;
Write once, run everywhere (iOS, Android, Web)
Saves time and money in development


2.Best User interface
Rich set of pre-built widgets                                                                                                                                                                                                                                            
Consistent look across platforms


3.Hot Reload
See changes instantly while coding
Makes development faster and easier



Flutter Disadvantages:-

1.Large App Size
Apps are bigger compared to native apps
Takes more storage space on devices


2.Limited Libraries
Newer platform, so fewer third-party libraries
Some features might need custom development


3.Learning Curve
New widgets system to learn
Different from traditional mobile development



Dart Advantages
1.Easy to Learn
Similar to Java and JavaScript
Clear and clean syntax


2.Fast Performance
Compiles to native code
Good for building quick apps


Type Safety
3.Catches errors before running
Makes code more reliable



Dart Disadvantages

1.Limited Usage
Mainly used with Flutter
Not widely used outside Flutter


2.Small Community
Fewer developers compared to other language
Less help available online


3.New Language
Still evolving and changing
Less mature than other languages




dynamic and var:-
---------------------
In Dart (the language used in Flutter), both dynamic and var are used to declare variables, but they behave differently. Here's a simple explanation of each: 

Var;-


- Fixed Type
- can assign any type of value, but once it's assigned, the type is fixed.
- What it does: When you use var, Dart automatically figures out the type of the variable based on the value you assign to it

Dynamic;-

- type Can Change
- What it does: When you use dynamic, the type of the variable can change at any time. It's more flexible but less safe.
- Flexible Type: You can assign any type to a dynamic variable and change it later.



Primitive and non Primitive Data Types;
----------------------------------------

Primitive Data Types:
Primitive data types are the basic building blocks of a programming language.
They store simple, single values and are predefined by the language.

In Dart, common primitive data types include:

1.int = age = 25;
2.bool =isFlutterFun = true;
3.duble =price = 9.99;


Non-Primitive Data Types:
Non-primitive data types are more complex and can store multiple values or a collection of data. 
They don‚Äôt hold the actual value directly; instead, they store a reference to the memory location where the value is kept.

1.List= List<String> colors = ['Red', 'Blue', 'Green'];
2.Map =Map<String, int> scores = {'Alice': 100, 'Bob': 95};
3.Class/object
4.set =Set<int> numbers = {1, 2, 3};
5.String =name = 'Flutter';





async*
------
What It Is: async* is a special way to create a function that can send multiple values using a stream.
Usage: When you define a function with async*, you use yield to send values out one by one.
Returns a Stream: Instead of returning a single result, it returns a Stream. A Stream is like a sequence of values that you can listen to, and they come in at different times.
async* is used to create the stream easily 

Streams:-
---------

a Stream is a sequence of asynchronous data events.
it's like a pipe that delivers data over time ,piece by piece , instead of all at once . it's useful when you want to get multiple piece of information or event as they happen 

Eg:- Think of a stream like a news feed. New articles (data) appear over time, and you can react to each one as they come in.


What It Is: A stream is a way to handle multiple pieces of data that come in over time.
Purpose: It lets you listen for updates, like user inputs or data from a server.
Example: Think of a stream like a playlist of songs you can listen to one by one.

Null aware
----------
In Dart, null-aware operators help handle null values safely.

1.Null-Aware Access (?)
The operator allows you to access the properties or call the method on an object if the object is not null
If the object is null, the operation returns null instead of throwing an Exception.

2.Null-Aware Assignment (??=)
The ??= operator assigns a value to a variable only if that variable is null.
If the variable already has a value, it remains unchanged.

3.Null-Aware Coalescing (??)
It is used to return the value on the left side if it's not null; otherwise, 
it returns the value on the right side.

  
Types of states:-
-----------------
Ephemeral State: Local to a widget, short-lived.
App State: Global, shared across the app.
Inherited Widget State: Passed down the widget tree.
Async State: Based on asynchronous operations.
Reactive State: Automatically updates in response to changes.



App State
---------

üîπ What is App State in Flutter (or any app)?
App State refers to the shared data or global state that affects multiple parts of your app, and often persists across screens and sessions.


‚úÖ Examples of App State:
Logged-in user information

App theme (light/dark mode)

Notification settings

Language preference

Shopping cart in an e-commerce app

Authentication token or session


üîÑ Why is App State Important?
When multiple widgets or screens need access to the same data, it becomes hard to manage using just local state (StatefulWidget). That‚Äôs when App State helps by making the data centralized and accessible throughout the app.


üß† Where is App State Stored?
Usually, App State is stored using a state management solution, like:

State Management	Description
Provider	Simple and official Flutter solution for global state
BLoC	Business Logic Component; uses streams and events
GetX	Lightweight, powerful, easy-to-use solution
Riverpod	Safer and more scalable alternative to Provider
Redux / MobX	Popular but more complex options


  State
 -------
it determines how a widget looks and behaves at any given time.

State refers to the data or information that a program or application keeps track of at a given time. 
In the context of software development, especially in Flutter or similar frameworks, 
state represents the current condition or status of a component or the entire app.


  Variables
 -----------

Variables are like boxes that hold information in a program. 
You can use them to store data that can change.


What is Main
------------

main is the starting point of a program.
It‚Äôs like the front door you enter to start your program.
Without main, the program wouldn't know where to begin.



Stateful vs. Stateless Widgets

1.StatelessWidget (Doesn't Change)
What it is: A widget that stays the same once it‚Äôs shown. It doesn‚Äôt change its look or data.
When to use: When you don‚Äôt need to update anything on the screen. For example, showing static text or an icon.

2. StatefulWidget (Can Change)
What it is: A widget that can change its appearance or data when something happens (like a button press).
When to use: When you need to update the UI, like a counter going up when clicked.



Build moded :-

1. Debug Mode
Use When: Developing your app.
Features:
You can debug your code (set breakpoints, see errors).
Hot reload lets you see changes quickly without restarting the app.
Checks for code errors are turned on.
Performance: Slower due to debugging features.

 
2. Profile Mode
Use When: Testing app performance.
Features:
Similar to debug mode but optimized for performance.
Good for profiling how your app runs.
Hot reload is available but not as fast as in debug mode.
Performance: Faster than debug mode but not fully optimized.


3. Release Mode
Use When: Launching your app to users.
Features:
Fully optimized for speed and size.
No debugging features or checks.
Performance: The fastest mode, ideal for production.




1. Debug Mode üõ†Ô∏è
Used when you're writing and testing your code.

You can use hot reload to see changes quickly.

Shows debug messages and errors.
‚úÖ Best for: Developing the app



2. Profile Mode üìä
Used to check your app's performance.

No hot reload, but you can still measure speed and smoothness.

Some debug info is still available.

‚úÖ Best for: Testing speed and animations


3. Release Mode üöÄ
Used when you're ready to publish your app.

No debug tools, no logs, and best performance.

Makes your app smaller and faster.

‚úÖ Best for: Uploading to Play Store or App Store








  Hash Table 
--------------

A hash table is like a special list that helps you find things quickly. 
It stores data in a way that makes searching super fast by using a "key." Think of it like a locker system: 
you have a key (unique number) that tells you which locker (place in the table) holds your item.

Instead of looking through the whole list, you use the key to jump straight to the right spot! 
This makes finding or storing data faster compared to regular lists.


 Flutter Architecture
----------------------

1. Flutter Framework (The Building Blocks):
This is where you write the code (widgets like buttons, text) to build your app.

2. Flutter Engine (The Power Behind):
This is the part that makes your app work, showing the widgets on the screen and making everything run smoothly.
What it is: The Flutter Engine runs all the code that you write in the Flutter Framework. 
It takes care of things like rendering your widgets, handling animations, 
and managing the communication between your app and the phone's hardware (like the camera or GPS).

3.Embedder
An embedder is something that helps Dart code run in different places, like on your phone, computer, or in a browser.

. Flutter:
Runs Dart code on mobile and desktop apps.

2. Web:
Turns Dart code into JavaScript to run in a browser.

3. Dart VM:(virtual machine)
Runs Dart code on servers or in the terminal.

Mixin:-

multi inheritance

Isolate:-

multi threading 
programming, it helps your app or program run more than one task simultaneously, making it faster and more efficient.




Final and Const:-

const:
Use const when the value is known at compile time for better performance.
A variable defined with const is also immutable (cannot change), 
but the value must be known at compile-time (before the program runs).
It is used when the value is constant and known before running the program.



final:
Use final when the value is known at runtime but should not change.
A variable defined with final can only be set once. After it gets a value, you can't change it.
It is used when the value is known at runtime (while the program is running).
Example:

  
-----------------------------------------------------------------------------------------
How to use in Mac for a ios developments 
________________________________________

1. Get a Mac

2. Install Required Tools
‚úÖ Install Xcode (For iOS Development)




Animation in flutter 
-----------------

Using Built-in Animated Widgets (For Simple Animations)

Using TweenAnimationBuilder (For Custom Tweens)

Using Hero (For Page Transitions)

Using Lottie for Pre-Made Animations




Layouts in flutter
------------------

Widget	Purpose
Container Box with padding, margins, and styling
Center	Centers child widget
Padding	Adds space inside a widget
Column	Vertical arrangement
Row	Horizontal arrangement
Stack	Overlapping widgets
ListView	Scrollable list
GridView	Grid-based layout













