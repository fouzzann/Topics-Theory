Week 17 (State Management)


1.Ephemeral state
2.App state
3.Three principle of GetX ✅
4.Adventage of getX 
5.Prodectivity of Getx
6.Get Builder VS obX()
7.consumer 
8.get material app
9.bloc builder,bloc listener, bloc consumer
10.Get.find
11.Get.put
12. .obs
13. RX String
14.Change notifier 
 
  

                                                                                Week(17)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




what is state management ?


State management in Flutter is about handling data changes and updating the UI when those changes happen.

State management in Flutter is like keeping track of everything happening in your based on user interactions or data changes—and making sure the app shows the right information at the right time.


real life Examples:-
1. State without Management:
 If the app didn't have proper state management, it would fail to update essential details dynamically. For example:

- When you add an item to your cart, the app wouldn’t reflect that change immediately.
- If you change the quantity or remove an item from your cart, the app might not update the cart total.
- If the delivery status changes (from "Order Placed" to "Out for Delivery"), you wouldn't know without manually refreshing the app.


2. State with Proper Management:
11:36 AM 19-03-202511:36 AM 19-03-2025
 In this case, the app uses state management to keep the UI and data in sync, so users get immediate feedback when actions happen.

- Cart State: When you add, remove, or update the items in your cart, the app keeps track of the current state of the cart (items and prices) and updates the display instantly.
- Order Status State: Once your order is placed, the state of the order moves through different phases (Order Placed → Preparing → - Out for Delivery → Delivered). The app updates the status automatically without requiring a refresh.
- User Session State: When you log in to the app, it keeps track of your session (like your saved address and past orders) and automatically updates the UI with personalized content.


types of state management-



setState():
When you call setState(), it rebuilds the entire widget tree of that widget, even if only a small part of the UI has changed. This can lead to unnecessary re-rendering, which may affect performance, especially in complex apps with large widget trees.

For small projects, setState() works fine, but as your app grows, it becomes harder to manage the state and track where setState() is being called, leading to potential bugs and increased complexity.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Provider:
 Provider is a simple way to share and update data in your app!
- Its help to share the data in the different parts of the app
- Instead of passing data around from one widget to another,
 Provider allows any widget to access and update the data directly.
to use in main :  in run App provider[]
Multi Provider
to use for the multiple function
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Bloc (Business Logic Components )

- Bloc is a way to manage how your app works behind the scenes.
- It helps to apps run smoothly, especially as they get more complex.

There are three main concepts: states and events:-
- Events are things that happen in the app, like a button press.
- Bloc help to listen the user and give the output based on the users interactions 
- States layer like snapshots of the app at a given moment.

How it works:-
- When you do something in the app (an event), Bloc notices.
- It then decides how the app should change based on that event.
- Finally, it updates the app's state to (Emit)changes that have happened.
to use in main :  in run App
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



GetX is a powerful and lightweight solution and its a reactive state management.  
that combines state management, dependency injection, and route management in a single package. It
- It makes our code cleaner and helps the app run faster.


1.state management `	
You can create observable variables that automatically update the user interface (UI) when their values change.
    

2.Dependency Injection:
You can easily create and manage the lifecycle of your controllers (classes that manage your app's data).
and we putting the get method using Get.put(StudentController());
Imagine you're making coffee. Instead of buying the coffee beans, grinder, and machine yourself (which is time-consuming), someone hands you everything ready to use. You just need to make the coffee. This is what Dependency Injection does: it gives a class everything it needs (its dependencies) without the class having to create or manage them.

3.Route
Navigating between screens is straightforward. You can move to a new page with simple commands.

to use in main : GetMaterialApp

Two state in getX

1.reactive State (Rx):
Reactive variables are defined using .obs

2.simple state
This is the non-reactive or simple state where controllers manage the state.
You use GetBuilder or GetxController to manually update the UI with update().

 What is RxString?
RxString is a reactive string variable in GetX.
It automatically updates the UI when its value changes.
It simplifies state management for strings in Flutter apps.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Riverpod:

Riverpod is a tool in Flutter to manage and share data, similar to Provider but easier to use and more powerful.
No Need for Context: You don’t need to pass the context around to access data, making it simpler.
Riverpod offers more flexibility and better error handling than Provider.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MobX:

Port of the MobX JavaScript library
Uses observables, actions, and reactions
Reactive state management
Best for: Apps with frequently changing state

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Redux:

Based on the Redux pattern from web development
Uses a single store for all app state
Follows a unidirectional data flow
Best for: Large, complex applications with a need for centralized statex

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


InheritedWidget

Description: A built-in Flutter class that allows you to pass data down the widget tree. Widgets can access data from their ancestors using BuildContext.
Use Case: Suitable for sharing state across widgets but can become cumbersome in larger apps.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Ephemeral State 

is the temporary data used in an app for a short time, like during a specific action. It disappears when the user leaves that part of the app or when the app is closed. This kind of state doesn’t need to be saved permanently in Local data base.

Temporary: Lasts only while you’re using a specific part of the app.
Not Saved: It doesn’t need to be stored in memory or a database.
Local: It’s only used in one specific place, like a single widget or page.
it's used in setState();

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


GetBuilder:

- Purpose: It is used for non-reactive state management. It only rebuilds the UI when you manually call update() in the controller.
- Use Case: Ideal for cases where you don’t need continuous or frequent updates, like when performing actions that only change the UI at certain points.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Obx(Observable Widget):

- Purpose: It is used for reactive state management. It automatically rebuilds the UI whenever the observed variable (Rx) changes.
- Use Case: Best for scenarios where you need real-time, automatic updates, like live data feeds or continuously changing values.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


consumer in Provider

A Consumer is a widget in Flutter, mainly used with the Provider package, that listens for changes in data. When the data changes, the Consumer rebuilds only the part of the UI that uses that data, which helps improve performance by avoiding unnecessary rebuilds of the entire widget tree..

BlocBuilder;

BlocBuilder is a widget in Flutter that helps you build a UI based on the state from a BLoC (Business Logic Component). It updates the UI automatically whenever the state changes.

.obs:-

- obs is a feature in GetX that makes a variable reactive. When you declare a variable with .obs, it allows the variable to notify the UI automatically when its value changes. This means that any part of the UI that uses this variable will update instantly without needing to manually refresh the screen.
 - When you append .obs to a variable (like an integer, string, or list), it converts that variable into an observable object. This means  that the variable can be observed for changes.

Get.put():-

Purpose: Used to register (or inject) a dependency (like a controller or a service) into the GetX dependency injection system.
Function: Creates and stores a new instance of a class (or object), typically as a singleton, and makes it available globally for retrieval.

Get.find():-

Purpose: Used to retrieve an already registered dependency.
Function: Finds an instance of a class that was already registered using Get.put() or another GetX method.


Change notifier 
-----------------

In Flutter, a ChangeNotifier is a simple class provided by the flutter/foundation.dart package that allows objects to notify listeners when a change occurs. It’s a key part of the Provider state management pattern.

🔧 How it works:
You create a class that extends ChangeNotifier.

When your data changes (e.g., a variable updates), you call notifyListeners().

Widgets that listen to this notifier will rebuild automatically when notified.

void increment() {
    _count++;
    notifyListeners(); // This tells the UI to update
  }

